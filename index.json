[{"content":" 2023-04-03 23:06 第一篇文章完成，正式开始运营。 ","date":"2023年 6月 3日","permalink":"/journal/","section":"容器","summary":"","title":"日志"},{"content":" 一直以来都非常感谢 从今往后也请多关照 ENAINE そのとおりです！\nHOPPOU-SeiKi 邦德大手子\n","date":"2023年 6月 3日","permalink":"/links/","section":"容器","summary":"","title":"友链"},{"content":"","date":"2023年 4月 28日","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"2023年 4月 28日","permalink":"/tags/matrix/","section":"Tags","summary":"","title":"Matrix"},{"content":"","date":"2023年 4月 28日","permalink":"/tags/postgresql/","section":"Tags","summary":"","title":"PostgreSQL"},{"content":"","date":"2023年 4月 28日","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":"2023年 4月 28日","permalink":"/tags/synapse/","section":"Tags","summary":"","title":"Synapse"},{"content":"","date":"2023年 4月 28日","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":" 前言 # 被 naine 要求当工具人，搭建 Matrix 服务器试试效果。Matrix 是一个去中心化，开源的实时通信服务框架，详情请谷歌其实能找到这篇文章的人完全不需要这些解释吧。\n首先选择搭建哪一种服务端，就我没有特意去查，即便如此也看到的服务端有三种，分别是：\nSynapse：Matrix 开发团队用 Python 写的第一代服务端，稳定但庞大，对服务器性能要求高，部署麻烦。 Dendrite：Matrix 开发团队用 Go 写的第二代服务端，性能表现更好（也就是对服务器性能要求没那么高）。 Conduit：第三方开发的用 Rust🦀 写的服务端。切中以上两者痛点，面向小型服务器，主打部署便捷，能快速运行起来而不需要去啃官方又臭又长的文档。 我的需求是不到 5 个人的超小聊天室，按照以上的特性归纳，我毫无疑问应该选择 Conduit …… 本来应该是这样的，但看到本文标题就应该明白最后选择的还是 Synapse。原因是 naine 要求用 Synapse 来搭建。工具人没有话语权，所以我们放弃看起来很方便的 Conduit，来搭建庞大的 Synapse。在搜介绍的时候看到有人说 Synapse 作为第一代官方服务端，用的人最多，所以网上各种教程也最多。但我在网上查到的中文搭建教程非常少，一共才三四篇可能外文教程比较多吧。总之过程中踩了不少坑，所以来记录一下工具人生活，也希望能让同样需求的人少踩点坑。\n环境 # 我的环境是嫖自谷歌云的 4h4g 的 Debian 11。Synapse 需要的具体配置我没有调查，但是作为实时聊天服务器，性能还是尽量往高走。正好 4h4g 只搭个博客也太浪费了，搭 Synapse 也算是充分利用性能了。\n安装 # 下面开始正式搭建过程。\n本文所有命令如无特别说明，请以 root 用户身份运行。 PostgreSQL 的安装 # 官方并没有对数据库类型做出要求，默认使用 sqlite3 作为数据库。但 sqlite3 虽然方便，性能却极其拉跨。所以选择使用官方推荐的 PostgreSQL 作为数据库。\n安装过程也很简便。首先更新一下软件包列表然后安装 PostgreSQL：\napt update apt install postgresql 即可。重点是接下来的配置。\nPostgreSQL 的配置 # 先来做好数据库的配置，这样配置 synapse 的过程会比较流畅。\n首先是一些新安装后的初始工作。刚安装好 PostgreSQL 时会自动新创建一个数据库用户和一个 Linux 系统用户，用户名都是 postgres，用以作为超级管理员管理数据库。所以先更改一下这两个用户的密码。\nsu postgres #以postgres用户登录Linux系统 psql #进入数据库 然后命令行前面的提示符会变成 postgres=#。接下来通过以下将数据库用户 postgres 的密码更改为 example。\nALTER USER postgres WITH PASSWORD \u0026#39;example\u0026#39;; 注意在数据库内;才代表这句命令完全结束了。若未完全结束，前面的提示符会变成 postgres-#。所以记得加上 ;。\n然后使用 \\q 退出数据库，然后使用 exit 退出 postgres 用户回到 root 用户。接着使用以下命令修改 Linux 系统用户 postgres 的密码。\npasswd -d postgres #清除postgres用户的初始密码 su postgres #重新进入postgres用户 passwd #修改postgres用户的密码 接着说一下我的目标：直接用管理员用户使用数据库会比较危险。所以为了避免误操作，建立一个新数据库用户 synapse_user 并设置密码；并建立一个新数据库 synapse 供 Synapse 使用。\n执行完上一部分命令后现在是 postgres 的系统用户身份。如果不小心退出了请使用 su postgres 回到此用户身份。\n先执行以下命令创建数据库用户 synapse_user：\ncreateuser --pwprompt synapse_user 其中 --pwprompt 表示建立该用户时设置密码，更详细的参数可参考 createuser。\n然后进入数据库\npsql 创建使用 UTF-8 编码，使用 ISO C 国际标准区域规则（即去除本地化，因为聊天服务器当然不止一个国家的人用但我和朋友一起用好像也没必要啊），使用数据库模板 template0（即纯净数据库，template1 为本地化后的数据库）的数据库 synapse：\nCREATE DATABASE synapse ENCODING \u0026#39;UTF8\u0026#39; LC_COLLATE=\u0026#39;C\u0026#39; LC_CTYPE=\u0026#39;C\u0026#39; template=template0 OWNER synapse_user; 关于 LC_COLLATE 和 LC_CTYPE 等详情，可查阅 23.1. 区域支持。关于 template0 和 template1，可查阅 22.3. 模板数据库。\n接着来到 /etc/postgresql/\u0026lt;pg_version\u0026gt;/main/ 下修改配置文件 pg_hba.conf，其中 pg_version 是你的 PostgreSQL 版本号。若没有找到该路径或文件请使用 find / -name pg_hba.conf 命令找到 pg.hba.conf 文件在哪。pg_hba.conf 用于配置客户端对数据库进行认证的详细参数。具体格式和内容可参考 pg_hba.conf文件。这里按照我的需求在文件末尾新开一行添加以下内容：\nhost synapse synapse_user ::1/128 md5 每项参数含义如下：\nhost：允许 TCP/IP 连接，不论是否使用 SSL。 synapse：只允许连接数据库 synapse。 synapse_user：只允许用户 synapse_user 连接此数据库。 ::1/128：即 127.0.0.1/32。 md5：使用 md5 加密密码。若没有设置密码请将此项改为 trust。 保存退出，至此，PostgreSQL 的配置就彻底完成了什么？调参？不会！告辞！大佬请自行调参。接下来终于可以开始正题 —— Synapse 的安装了。\nSynapse 的安装 # Synapse 的安装也是非常的简单。首先安装依赖：\napt install -y lsb-release wget apt-transport-https 然后安装 Matrix 官方仓库 GPG 公钥，添加其官方源。\nwget -O /usr/share/keyrings/matrix-org-archive-keyring.gpg https://packages.matrix.org/debian/matrix-org-archive-keyring.gpg echo \u0026#34;deb [signed-by=/usr/share/keyrings/matrix-org-archive-keyring.gpg] https://packages.matrix.org/debian/ $(lsb_release -cs) main\u0026#34; | tee /etc/apt/sources.list.d/matrix-org.list 然后更新软件列表并安装：\napt update apt install matrix-synapse-py3 即可。安装过程会提示输入 server name：\n安装过程的server name server name 是服务器的唯一标识，还会影响到在你的服务器上注册的用户的用户名。按我查到的教程来说，好像是可以随意填的，但根据我完全不严谨的探索，想完全正常使用并且方便配置的话最好填自己的域名。比如我这里填 myvessel.top 。Matrix 的 Delegation 功能使得 Synapse 可以和其他 server 共用同一个域名，所以不需要担心这个域名已经被别的 server 使用了。Server name 在 Synapse 正式初始化并启动运行之后就不能随意更改了，除非删除数据库重新开始但这玩意安装好之后自动就启动了，真是 nt 逻辑，也就是说不在这里填对就得删库，所以请慎重填写。\n然后会问你是否发送匿名数据供他们统计，请按个人喜好选择。我选择拒绝😀。\n看起来 server name 已经算坑了，但真正的大坑还在后头这俩东西都是安装一时爽，配置火葬场。\nSynapse 的配置 # 然后终于来到了本文重头戏，配置 Synapse，大坑。\n配置 Synapse 主要是配置位于 /etc/matrix-synapse/ 的 homeserver.yaml 文件。这里首先就有个坑，按我找到的几篇中文教程的语境，貌似安装好 Synapse 后会自动给一个非常详细的，很多注释项的 homeserver.yaml。但实际上我看到的 homeserver.yaml 是一个非常简陋的，并且不能投入使用的文件。有教程自行进行每一项的配置，但按我这个非常简陋的 homeserver. yaml ，每一项都需要去对着 官方的配置手册 自己添加，这也太麻烦了，而且官方文档写的也不是很出色，缺少实例，自己对着写出问题概率很高。但其实直接使用官方的生成配置文件功能即可解决这个问题。\n首先来到 /etc/matrix-synapse/ 下，把原本的 homeserver.yaml 删了，然后运行以下命令：\n/opt/venvs/matrix-synapse/bin/python -B -m synapse.app.homeserver -c homeserver.yaml --generate-config --server-name=example.com --report-stats=no 其中 example.com 请替换为自己的 server name。\n运行完成后当前目录就会多出几个文件，都是运行需要的文件，不用乱动。再打开新生成的 homeserver.yaml，这时就会发现多了几项内容，并且都已经填好了内容。有一篇教程使用自行生成的随机字符串作为 registration_shared_secret ，但其实直接使用这个生成功能，会自动把 registration_shared_secret 也生成了，就不必担心自己生成的字符串有问题了。\n此时这个配置文件已经是可以投入正常使用的配置文件了，但我们还要修改一下，便于自己使用。\n首先把 sqlite3 数据库更换为前面累死累活安装配置好的 PostgreSQL 数据库。\n在内容中找到 sqlite3 相关的配置，然后注释掉或者删去。替换为以下内容：\ndatabase: name: psycopg2 args: user: synapse_user password: yourpassword database: synapse host: 127.0.0.1 cp_min: 5 cp_max: 10 keepalives_idle: 30 keepalives_interval: 10 keepalives_count: 3 将以上内容根据自己实际情况填写。\n另外注意 yaml 对缩进和空格要求非常严格，所以请确保自己对齐了。\n以下是我的配置：\nserver_name: \u0026#34;myvessel.top\u0026#34; pid_file: /etc/matrix-synapse/homeserver.pid listeners: - port: 8008 tls: false type: http x_forwarded: true bind_addresses: [\u0026#39;::1\u0026#39;, \u0026#39;127.0.0.1\u0026#39;] resources: - names: [client, federation] compress: false #database: # name: sqlite3 # args: # database: /etc/matrix-synapse/homeserver.db database: name: psycopg2 args: user: synapse_user password: yourpassword database: synapse host: 127.0.0.1 cp_min: 5 cp_max: 10 keepalives_idle: 30 keepalives_interval: 10 keepalives_count: 3 log_config: \u0026#34;/etc/matrix-synapse/myvessel.top.log.config\u0026#34; media_store_path: /etc/matrix-synapse/media_store registration_shared_secret: \u0026#34;example\u0026#34; report_stats: false macaroon_secret_key: \u0026#34;example\u0026#34; form_secret: \u0026#34;example\u0026#34; signing_key_path: \u0026#34;/etc/matrix-synapse/myvessel.top.signing.key\u0026#34; trusted_key_servers: - server_name: \u0026#34;matrix.org\u0026#34; - server_name: \u0026#34;neo.angry.im\u0026#34; - server_name: \u0026#34;bgme.me\u0026#34; suppress_key_server_warning: true enable_registration: true enable_registration_without_verification: true 其中的敏感内容都用 \u0026ldquo;example\u0026rdquo; 进行了替代，替代前都是实际可用的值。\ntrusted_key_servers 是现有的信任服务器，不能为空，默认为 matrix.org，可以加入自己认识的实例，我这里添加了 neo.angry.im 和 bgme.me 虽然并没有用上。除此之外最后 3 行是我新配置的内容，效果分别如下：\nsuppress_key_server_warning：如果 trusted_key_servers 中有 matrix.org，此项须设为 true，否则启动时会有警告。 enable_registration：设为 true 时允许注册。不能单独启用，下面必须设置注册验证方式或设为不验证即可注册。详情请查阅 官方说明。 enable_registration_without_verification：设为 true 时允许不验证即可注册。 配置好之后运行：\nsystemctl restart matrix-synapse 若无报错，即成功运行 Synapse。若有报错，请检查配置。\n然后可运行：\nwget http://localhost:8008 cat index.html 若有出现“Synapse is running”相关字眼，则说明成功运行了。\n接下来给自己注册一个管理员账号，在终端里输入：\nregister_new_matrix_user -c /etc/matrix-synapse/homeserver.yaml http://localhost:8008 然后在询问是否为管理员账户时输入 yes 即可。\n在终端用以上方式进行注册是不受上文中 enable_registration 这一项的影响的，所以如果人数少并且用户不介意的话，可以直接在终端给全部用户都全部注册好，这样也就不需要开启注册了。\n因为按我的需求，除了我之外只有几个人注册，所以我直接设为不验证注册了，注册完之后再把 enable_registration 和 enable_registration_without_verification 这两行删掉或者注释掉，然后再使用：\nsystemctl restart matrix-synapse 即可生效。每次修改了 homeserver.yaml 都需要运行上面的命令使新配置生效。\n另外如果需要修改 server name，首先需要删除数据库重新创建，然后需要修改 homeserver.yaml 里的 server_name，以及 /etc/matrix-synapse/conf.d/ 下的 server_name.yaml 里面的 server_name 这两个 server_name 需要保持一致。再用上面的命令 restart 即可。\n配置外部访问 # 为了让别人能用域名进行访问，需要设置反向代理，可参考 官方文档。前文以及说过由于 Matrix 的 Delegation 功能，使得 Synapse 可以和其他 server 共用同一个域名。而由于 server name 会影响你的账户名（形如@xxxx: example.com）。我觉得后面跟个老长的三级域名实在很不方便，所以选择直接用我的二级域名 myvessel.top 来作为 server name。\n我使用的是 Caddy，原 Caddyfile 内容如下：\nwww.myvessel.top , myvessel.top { encode gzip br root * /root/homepage file_server } 然后直接按照 官方文档配置 Caddyfile 如下：\nwww.myvessel.top , myvessel.top { encode gzip br root * /root/homepage file_server header /.well-known/matrix/* Content-Type application/json header /.well-known/matrix/* Access-Control-Allow-Origin * respond /.well-known/matrix/server `{\u0026#34;m.server\u0026#34;: \u0026#34;matrix.myvessel.top:443\u0026#34;}` respond /.well-known/matrix/client `{\u0026#34;m.homeserver\u0026#34;:{\u0026#34;base_url\u0026#34;:\u0026#34;https://matrix.myvessel.top\u0026#34;},\u0026#34;m.identity_server\u0026#34;:{\u0026#34;base_url\u0026#34;:\u0026#34;https://identity.myvessel.top\u0026#34;}}` } matrix.myvessel.top { reverse_proxy /_matrix/* localhost:8008 reverse_proxy /_synapse/client/* localhost:8008 } 可能有人会有疑惑这个 identity.example.com 没有配置过啊，是不是需要自己额外配置？答案是不需要，按照文档里写上就行了。\n配置好反向代理之后按理来说就可以访问了，但我这里因为使用了 Delegation 功能，所以直接访问我的 server name 是看不到 Matrix 的相关信息的。所以使用 Matrix Federation Tester 进行测试。在里面输入自己的 server name，若下方无报错并出现四个 Success 字样，即表示搭建成功，正常运行。接着就可以在各种客户端上使用了，可在 Clients | Matrix.org 中寻找心仪的客户端。\n后记 # 这也算是比较大的项目了，即使比起小白时有所长进，也还是磕磕绊绊踩了不少坑。顺便吐槽一下搭好之后用了不到一小时 naine 就觉得不好用，直接抛弃了铁渣男。所以撰写本文时服务器已经关闭了。但折腾过程还是挺有意思的，值得记录一下。\n参考文章 # 除文中提及的官方文档外，参考文章如下：\nMatrix聊天服务器Synapse的搭建 - Fantasy Land Matrix踩坑记（一） - 影子屋 安装Matrix系统（Riot.im）的服务端Synapse - 简书 感谢各位作者。\n","date":"2023年 4月 28日","permalink":"/posts/%E6%90%AD%E5%BB%BAmatrix%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%AB%AFsynapse/","section":"Posts","summary":"","title":"搭建Matrix的服务端Synapse"},{"content":"","date":"2023年 4月 28日","permalink":"/","section":"容器","summary":"","title":"容器"},{"content":"","date":"2023年 4月 28日","permalink":"/categories/%E6%9C%89%E8%B6%A3%E7%9A%84%E4%B8%9C%E8%A5%BF/","section":"Categories","summary":"","title":"有趣的东西"},{"content":"","date":"2023年 4月 4日","permalink":"/tags/caddy/","section":"Tags","summary":"","title":"Caddy"},{"content":"","date":"2023年 4月 4日","permalink":"/tags/debian/","section":"Tags","summary":"","title":"Debian"},{"content":"","date":"2023年 4月 4日","permalink":"/tags/nginx/","section":"Tags","summary":"","title":"Nginx"},{"content":"","date":"2023年 4月 4日","permalink":"/tags/ssl/","section":"Tags","summary":"","title":"SSL"},{"content":" 前言 # 在搭建博客期间，我在两个地方踩的坑最多，花的时间也最多。其一是 SSL 证书，其二是 Nginx。其实在了解之后配置 Nginx 和获取 SSL 证书也不算特别麻烦，但对以前没接触过的新手来说无疑是非常头疼的 (当然也有可能是 Apache)。但昨天 naine 跟我提到了 Caddy，听说可以直接解决这两大问题，所以今天不是来倒这俩玩意的苦水，而是来试水 Caddy。\n顺带一提在写这篇文章的时候，本站已经是使用 Caddy 进行工作了。\n本文所有命令如无特别说明，请以 root 用户身份运行。 Nginx VS Caddy # Nginx 作为老牌选手，自然拥有很多优点。\n处理并发能力极强，可同时支持 2~4 万个连接。 低内存消耗，3 万并发连接，10 个 Nginx 进程的情况下，消耗内存不到 150 MB。 稳定性强，可连续运行数个月不需要重启，还支持热更新。 作为老牌软件一般很多系统官方源都有收录对应的包，安装较为简单 (最新版不一定简单)。 而 Caddy 的优点如下：\nGolang 写的，几乎无依赖，非常干净，一个二进制文件搞定。 无需配置，默认全站 https，自动申请证书，自动到期续签。 无需配置，默认全站 http2 (可以配置 http3)。 配置文件相比于 Nginx 非常简单，容易上手，一目了然。 综上，作为一个私人博客其实没有那么高的访问量和负载问题，nginx 除了稳定之外的大部分优点其实是用不到的，但是缺点较为明显，就是要自己去申请 SSL 证书，自己进行繁琐的配置。这对于一个新手来说是比较麻烦，要付出大量时间成本去试错的问题。而反过来 Caddy 的配置文件很简单，并且自动申请证书续签证书，对新手来说非常友好。看到这里我已经比较心动了，所以废话不多说，直接开工。\nCaddy 的安装 # Go 的安装 # 由于 Caddy 是 Golang 写的，我的系统不自带，所以需要先安装 Go。\n先安装一些必要的软件包。\napt update apt upgrade -y apt install curl vim wget gnupg dpkg apt-transport-https lsb-release ca-certificates 然后根据 官方教程进行安装。\nwget https://go.dev/dl/go1.20.2.linux-amd64.tar.gz # 版本号可自选 rm -rf /usr/local/go \u0026amp;\u0026amp; tar -C /usr/local -xzf go1.20.2.linux-amd64.tar.gz echo export PATH=$PATH:/usr/local/go/bin | sudo tee -a /etc/profile # 这里与官方教程不一样，使用此命令可让此环境变量为所有用户生效 source /etc/profile go version # 验证安装成功与否 Xcaddy 的安装 # Apt 安装 # 直接 apt install 安装的 caddy 不能自定义插件，可以使用官方的 xcaddy 自己编译加入了自己喜欢的插件的 caddy 二进制文件。\n首先加入 caddy 的公钥和源\ncurl -sSL https://dl.cloudsmith.io/public/caddy/xcaddy/gpg.key | gpg --dearmor \u0026gt; /usr/share/keyrings/xcaddy.gpg echo \u0026#34;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/xcaddy.gpg] https://dl.cloudsmith.io/public/caddy/xcaddy/deb/debian any-version main\u0026#34; \u0026gt; /etc/apt/sources.list.d/xcaddy.list 然后\napt update apt install xcaddy xcaddy version 即可完成安装。\n编译安装 # 若是不喜欢 apt 安装，可以在 caddyserver/xcaddy Build Caddy with plugins Go 623 100 的releases中下载对应的包，自行编译安装。\nGo 安装 # 也可以使用上一步安装好的 Go 来安装 xcaddy。\ngo install github.com/caddyserver/xcaddy/cmd/xcaddy@latest 不过我自己没试过，不知道具体效果如何有兴趣可自行尝试。\n准备工作稍显麻烦，这也是 Caddy 对新手来说不太友好的地方。好在这是一劳永逸的，可以接受。\n安装 Caddy # 完成准备工作之后就可以正式开装了。Xcaddy 可以自定义插件编译，这里安装缓存和 Brotli 模块。因为我是阿里云的 DNS，所以再加一个阿里云 DNS 的模块，方便 SSL 证书的签发。\nxcaddy build \\ --with github.com/caddyserver/cache-handler \\ --with github.com/ueffel/caddy-brotli \\ --with github.com/caddy-dns/alidns 完整的模块列表请看 Modules - Caddy Documentation。\n编译完成后便会在当前目录下产生一个二进制文件。运行\n./caddy 即可查看帮助。\n可以使用\nln -s /caddy的绝对路径/caddy /usr/bin/caddy 建立软连接，这样使用 Caddy 时就不用在前面加路径了。但是这样运行的 Caddy 会在/usr/bin 下找 Caddyfile，所以建议加入 --config 指定 Caddyfile 的路径，具体请看后文。\nCaddyfile # Caddy 可以使用 json 作为配置文件，但 json 编写较为麻烦，于是他们开发了 Caddyfile 作为配置文件。Caddyfile 的优点很明显，就是易读易写。事实上 Caddyfile 是被转换为之后 json 再被 Caddy 使用的，使用 Caddyfile 就是单纯的为了方面读写。\n简单上手 Caddyfile # Caddy 运行时会自动寻找本身所在目录下的 Caddyfile 并加载。所以我们先在 caddy 二进制文件所在目录下新建一个 Caddyfile (不需要后缀)。\ntouch Caddyfile 先来看官方给出的结构解析\nCaddyfile 示例 这里不打算很详细地写 Caddyfile 的所有功能，只打算帮想从 Nginx 换成 Caddyfile 的人快速度过学习阵痛期。如果想详细了解，可以看 Caddyfile 语法浅析 - Kovacs。感谢大佬的解析，让我很快了解了 Caddyfile。\n言归正传，虽然说易读易写，但刚接触还是需要一点时间学习。这里就以 Nginx 的配置文件为例，跟 Caddyfile 一部分一部分对应，会比较直观。\n需要注意的是，空格在 Caddyfile 中非常重要，所以不要输入无意义的空格。\nThe Caddyfile is lexed into tokens before being parsed. Whitespace is significant in the Caddyfile, because tokens are separated by whitespace.\n以上是官网原话。\n以下是我的 Nginx 配置中除了默认部分外自行配置的部分。\nserver { listen 443 ssl http2 default_server; listen [::]:443 ssl http2 default_server; server_name \u0026#39;your ip\u0026#39;; ssl_certificate /root/ipssl/ip.pem; ssl_certificate_key /root/ipssl/ip.key; ssl_session_timeout 5m; ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3; return 444; } # 防止证书泄露源站IP server { listen 80 ; listen [::]:80 ; server_name \u0026#39;your ip\u0026#39; myvessel.top *.myvessel.top; rewrite ^(.*)$ https://$host$1 permanent; } # 将所有http请求重定向为https请求 关于防止证书泄露源站 IP，具体请看 从零开始的建站记#防止证书泄露源站IP\nupstream halo { server 127.0.0.1:8090; } # 设置上游，可用于负载均衡，不过我没弄。可以给下方server块当作proxy主机使用 server { listen 443 ssl; listen [::]:443 ssl; server_name myvessel.top www.myvessel.top; ssl_certificate /etc/letsencrypt/live/myvessel.top/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/myvessel.top/privkey.pem; ssl_session_timeout 5m; ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3; location / { proxy_pass http://halo; # 使用上游halo proxy_set_header HOST $host; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; client_max_body_size 1024m; } } # 反向代理至halo，也就是本博客 以下是对应的 Caddyfile (使用效果并非完全一样，只是基本一致)。需要注意的是上面 Nginx 的配置是自己配置的部分，而下面的 Caddyfile 是完整的文件内容。\nwww.myvessel.top, myvessel.top { encode gzip # 因为nginx默认开启了gzip，所以这里也跟着一起开。 reverse_proxy 127.0.0.1:8090 # 反向代理至8090端口 } 没错，就这么点。好了，本文圆满结束😋\n开玩笑捏。不过上面的 Caddyfile 范例是真的可以直接投入使用的。也可以跟我一起做一些别的配置。让使用更顺心一点。\n{ storage file_system /root/caddy/ # 让运行相关的文件保存至/root/caddy下，路径可随意自定义 log { output file /root/caddy/logs/access.log { roll_uncompressed # 日志文件不启用gzip压缩 } } # 自定义路径保存日志 acme_dns alidns { access_key_id your_key access_key_secret your_secret } # 阿里云DNS认证配置 } # 第一个没有前缀的大括号内容即为全局配置，跟Nginx的全局配置类似 www.myvessel.top, myvessel.top { # 注释1 encode gzip br # 装了Brotli所以启用 reverse_proxy 127.0.0.1:8090 } # 大括号有地址前缀的即为站点配置，跟Nginx的server块类似。虽然只有单个站点的情况下可以不加大括号，但我还是建议全都加上大括号以防万一。 注释 1：此行大括号的前缀即为地址 (address)，可以理解为 Nginx 中 server 块中的 server_name。\n什么？你问 SSL 证书相关配置去哪了？http 重写到 https 又去哪了？防止证书泄露源站 ip 的配置呢？\n答案是不需要了，Caddy 已经默认帮你配置好了。默认全站 https (即自带 http 重写到 https，并自动申请证书，自动配置证书)，在 从零开始的建站记#防止证书泄露源站IP 中有提到 Nginx 1.19.4 以上给出了 ssl_reject_handshake 这个选项，Caddy 相当于默认启用了 ssl_reject_handshake，避免了因为证书泄露源站 IP。如果有需要当然可以对着官方文档自己动手调整相关配置。但如果没有精力做这些，直接开箱即用即可，非常舒畅简便。\n如果需要数字 IP 访问，并进行了对应的站点配置。根据官方文档 此处的说明，IP 的 SSL 证书将从本地信任的嵌入式 CA 颁发证书。\n关于“转发”效果的功能，实例只提到了 reverse_proxy，实际上一共有以下几种：\nreverse_proxy：即反向代理，与 Nginx 中 server 块中的 location / {} 类似。 root：与 Nginx 中 server 块中的 root 类似。可以换一行加上 file_server 表示提供静态文件服务器，加上 php_fastcgi [以及后续参数] 提供 PHP 服务。 后两种是对访问 URI 进行操作。 redir：将请求 URI 重定向至某个 URI。 rewrite：将请求 URI 重写至某个 URI。与 redi 的不同之处在于使用 rewrite 时请求客户端显示的 URI 不变，重写是在内部进行的。而 redi 会让客户端的 URI 一起变化。 也就是说，Caddy 的自动 https 重写，实际上是用 redir 完成的，相当于在每个站点配置中加入了如下字段：\n@http { Protocol http } redir @http https://{host}{uri} 其中@开头前缀的大括号作用是定义匹配器，可以实现复杂的匹配功能，以供调用。\n若是想开启 http 3，可在全局配置 (即第一个没有前缀的大括号)中加入如下字段：\nservers : 443 { protocols h1 h2 h3 #也可以只写 h3，表示只允许 http3 连接，不过兼容性差 } 即可开启 http 3。\n测试，格式化 Caddyfile # 写好了 Caddyfile，自然不能直接启用，要先测试一下有没有问题。官方给出了如下命令用来测试：\ncaddy validate 效果对应 Nginx 的nginx -t。感觉\u0026hellip; 不如nginx -t\u0026hellip; 简洁默认在 caddy 二进制文件所在目录下寻找 Caddyfile，若 Caddyfile 在别处可在命令后加入--config /Caddyfile 的路径。\n事实上，自己编写的 Caddyfile 可能会有很多不规范的格式。若有强迫症，可在测试通过后使用官方给出的\ncaddy fmt --overwrite 来对 Caddyfile 内容进行格式化。\n同样是默认在 caddy 二进制文件所在目录下寻找 Caddyfile，若 Caddyfile 在别处可直接在命令末尾空一格再加上 Caddyfile 的路径。\n启动 Caddy # 就算比起 Nginx 友好得多，过程对新手也还是有点难的。不过现在终于完事了，可以投入使用了。Caddy 有两种启动方法，分别是caddy run和caddy start。区别在于caddy run会在前台启动 Caddy，官方说 Ctrl+C 或者退出终端会结束 Caddy 进程 (但根据我亲身体验，完全放屁，只有kill -9才能彻底停止，否则会一直占用端口)。而caddy start会在后台启动，你可以关闭终端去做任何事。可以使用caddy stop来停止进程。所以正常投入使用时，应该选择caddy start而不是caddy run。\n启动后，一开始是访问不了的，因为 Caddy 还在申请证书。等一会就可以访问了。日志中可以看到\ntls.obtain certificate obtained successfully 的字样，说明证书申请成功了。\n根据官方文档 此处和 此处的说明，若不进行特别配置，证书默认由 Let\u0026rsquo;s Encrypt 或 ZeroSSL 颁发。我这边是随机到 Let\u0026rsquo;s Encrypt 的证书。\n在运行过程中，可以使用caddy reload来重载配置文件，与 Nginx 中nginx -s reload类似。\n保护 Caddy 进程 # 其实本来直接caddy start就挺方便的，进程也挺稳定。但有人喜欢用 systemd 来管理。官方也给出了 教程。简单总结一下流程。\n首先确认 caddy 文件位于/usr/bin/下，或使用上文提到的软连接。然后添加用户组和用户：\ngroupadd --system caddy useradd --system \\ --gid caddy \\ --create-home \\ --home-dir /var/lib/caddy \\ --shell /usr/sbin/nologin \\ --comment \u0026#34;Caddy web server\u0026#34; \\ caddy 然后在/etc/systemd/system/下新建caddy.service，在里面写入如下内容：\n[Unit] Description=Caddy Documentation= https://caddyserver.com/docs/ After=network. Target network-online. Target Requires=network-online. Target [Service] Type=notify User=caddy Group=caddy ExecStart=/usr/bin/caddy run --environ --config /etc/caddy/Caddyfile ExecReload=/usr/bin/caddy reload --config /etc/caddy/Caddyfile --force TimeoutStopSec=5 s LimitNOFILE=1048576 LimitNPROC=512 PrivateTmp=true ProtectSystem=full AmbientCapabilities=CAP_NET_BIND_SERVICE [Install] WantedBy=multi-user. Target 请仔细检查execStart和execReload中的路径是否符合自己实际情况，然后保存退出。\n然后\nSystemctl daemon-reload Systemctl enable --now caddy Systemctl status caddy 若为active，则运行成功。\n但我自己运行失败，查了一下可能是 selinux 的问题，但我压根没有 selinux。一气之下直接不弄了，继续caddy start。\n后记 # Caddy 比起 Nginx + Certbot 简单了不止一点，属于是新手福音了。当初要是先看到 Caddy，建站时间肯定能省好几天。不过 Nginx + Certbot 也让我学到了不少东西就是了。提前上课，避免补课。如果你还在为 Nginx 的配置和 SSL 证书烦恼，不妨也来试试 Caddy。\n参考文章 # 除了提及的各官方文档外，感谢以下文章的作者：\nDebian 11 / Ubuntu 22.04 使用 xcaddy 自定义编译 Caddy - 烧饼博客\nCaddyfile 语法浅析 - Kovacs (mritd.com)\n从 Nginx 切换到 Caddy - Kovacs (mritd.com)\n","date":"2023年 4月 4日","permalink":"/posts/%E5%B0%86nginx%E6%9B%B4%E6%8D%A2%E4%B8%BAcaddy/","section":"Posts","summary":"","title":"将Nginx更换为Caddy"},{"content":"","date":"2023年 4月 4日","permalink":"/categories/%E5%AE%9E%E7%94%A8%E7%9A%84%E4%B8%9C%E8%A5%BF/","section":"Categories","summary":"","title":"实用的东西"},{"content":"","date":"2023年 4月 3日","permalink":"/tags/halo/","section":"Tags","summary":"","title":"Halo"},{"content":"","date":"2023年 4月 3日","permalink":"/tags/hello-world/","section":"Tags","summary":"","title":"Hello-World"},{"content":"","date":"2023年 4月 3日","permalink":"/tags/hexo/","section":"Tags","summary":"","title":"Hexo"},{"content":"","date":"2023年 4月 3日","permalink":"/tags/%E5%8D%9A%E5%AE%A2/","section":"Tags","summary":"","title":"博客"},{"content":" 前言 # 建立本站的起因请看关于界面。再次感谢 naine 的鼓励和帮助。在建立本站过程中遇到了许多问题，也学到了许多知识。这是本站第一篇正式的文章，用来记录一下建站过程中遇到的问题，踩到的坑，学习到的东西。\n想直接看结论和建议请直接拉到该小节最后。\n服务器和域名 # 想要建站，最先需要解决的问题就是服务器和域名。如果不介意 IP 裸奔的话，域名可以缓缓。如果想搭在本地并且使用内网穿透的话，服务器也可以缓缓。但为了舒适的体验和方便的管理，个人还是建议在这方面下点成本。实际上这也是搭建博客唯一一个需要花钱的地方。搭建其他网站的话我没有接触过，不敢妄加评论，建议各位自行了解查询。\n回到正题，在服务器方面，一开始是 naine 发送了一个阿里云的 VPS 的白嫖链接，通过认证之后可以白嫖 7 个月。2 核 2 g，40 g 硬盘，相当不错，这也是我最初接触 VPS，是最初的起点（其实也就三个星期左右前）。在部署了两个小项目之后，在某个原因的推动下我决定建立自己的博客。自此开始正式搭建本站。\n首先当然是用白嫖的这个阿里云 VPS 搭建，不用白不用。使用阿里云的 Centos 镜像，换源之后使用还算顺畅。但很快问题来了，在我最开始看的教程中，可以把博客部署在 github 的仓库上，这样可以使用仓库的域名访问，不用 IP 裸奔，但国内的 VPS 不科学上网的情况下连接 github 实在是比较玄学，相信大家都明白的。而且使用 github 的仓库当域名有点挫，长度也稍显拖泥带水，也不利于记忆。于是我作为学生党，最先考虑去白嫖域名。也是 naine 发给我的 Porkbun 白嫖域名，让我成功白嫖到一个还不错的域名。在查找教程和 naine 的指点下，用 Cloudflare (下文简称 cf)将域名解析到 IP 之后，顺便装了 Nginx，配置了一下 cf 的 SSL 证书。就在此时出问题了，访问域名显示 error 521。按照很多网友的说法，这是 SSL 证书的问题，这让我们在 SSL 证书上耗费了许多时间（全部木大），但在谷歌了各种办法和 naine 的排查后，终于确定了就是单纯的用阿里云 VPS 没有在国内备案。。。可以直接用 IP 访问，但不可以用域名访问。若是大陆外的服务器则不需要备案，大陆内的所有服务器都需要备案。至此开始思考下一步解决方案。\n备案？很蓝的啦 # 鉴于这个问题只需要备案即可解决，我估摸着我做博客也不违法，备案也没什么问题，所以我就去了解备案流程，准备备案。但发现国内 VPS 必须要国内域名才能备案。而现在的域名是国外域名商的，不可以备案，于是我先尝试能不能把这个域名转入阿里云，阿里云竟然提示新域名注册需要满 60 天后才能转入。我觉得太久了，直接放弃，遂直接在阿里云买了个新域名，也就是现在本站的域名。然后开始备案，在备案过程中了解到现在天朝对个人运营网站的备案态度比较严格（并且越来越严格），具体表现在备案时的网站名称（与实际显示的网页的名称和内容无关）和网站类型不知如何填写，缺乏指引。如果填写内容不合规定，备案不通过还会退回，中途非常浪费时间。尤其是网站名称，限制非常非常多。 我就想知道遵守这些要求能起什么名字 还有一些很乐的回答。 乐 再乐 本身备案时间就久，如果申请不合格，打回重来更久。并且不仅需要 ICP 备案，还需要公安备案，并且要在网页中摆放备案信息，否则可能有高额罚款。我感觉不仅麻烦而且有种寄人篱下的卑微，有点难以接受。并且根据现在的严格程度，估计备案也得 60 天左右，还是太久。遂放弃，由于只有大陆的服务器需要备案，因此转而寻找大陆外的 VPS。\n对于几家服务商的体验和看法 # 仅供参考\n服务商 体验 看法 阿里云 使用最久，体验最多，控制台较为“简洁”。价格不贵也不便宜，2h1g 的新加坡轻量应用服务器 24 RMB/月，是比较适合新手的选择。当然注册有 7 个月免费的 2h2g 国内 VPS，可以练手体验过后再考虑入手。 该有的都有，但 DNS 相关的方面跟 cf 比起来就很小气，如果不在意国内访问速度的话可以选择用 cf 进行解析，可以体验免费 cdn 等。在本地化和大方程度来说是新手首选，网上也有很多教程。另外国内 VPS 虽然可以练手，但很多项目需要连接外网，体验肯定不会很好。 阿里云国际 还未实际体验，根据调查到的消息为注册即可白嫖一年，但注册需要对应区的手机号 (可 gv)需要非国区的 paypal (可虚拟卡)实际体验后更新。 未体验，无看法。但听说风控较为严格，一旦使用非注册地 IP 登录就会被风控，需要实名。 腾讯云 免费体验 4h8g 的轻量服务器一个月，但地区只有国内可选。 同阿里云国内免费体验，可以练手，但综合来看还是境外服务器更佳。另外新加坡 2h2g 轻量为 32 RMB/月，可以与阿里云对比一下。 腾讯云国际 白嫖需要填表格申请，基本上不用想了。 别浪费时间了，白嫖党注册这个完全没用，非白嫖感觉也不如买其他的。 亚马逊云 (AWS) 给出一年的免费体验，一般为 1h1g，某些地区为 2h1g (例：香港，需要手动开启此地域)。还可以使用+86 注册，唯一门槛是需要外币支付手段，但不同账户可以绑同一张卡，相当于无限白嫖待遇相当优渥。 使用非常舒适，可惜，风控也很严格，如果让你提供你注册时填写地址的水电费账单就是寄了。我个人用了不到一星期就中了风控，数据都拿不回来。建议控制住登录 IP，小心使用。另外控制台和各种文档相当庞杂，上手有一定难度。 AZURE 注册时环境要求高，但+86 可注册。有两种白嫖，一种是学生优惠，白嫖一年 VPS+100 刀；另一种是正常试用，白嫖一个月 VPS+200 刀，到期后可转为即用即付继续白嫖，不过具体情况需要体验之后再说。VPS 可以开两台，一台 Linux 一台 Windows，都是 1h1g，硬盘给到 64 g 的 SSD。 注册时关闭梯子老实注册即可。若没有学生优惠则需要境外支付手段注册。建议为能学生就学生。听说风控非常严格，建议同上，小心使用。VPS 虽然能开两台，但 1h1g 的 Windows，怎么想都是高血压。建议拿来搭建云盘或图床，毕竟 64 g 还是能存不少东西。另外控制台感觉不如亚马逊，体验不是很好。 谷歌云 (GCM) 注册简单 (有谷歌账号即可)。风控目前未听说很严格，有待观察。给出免费 300 刀，三个月。配置任选。本站现在为 4h4g 的 n2 实例，三个月正好能差不多把 300 刀花完。 究极无敌牛逼的财大气粗，玩一玩高配置机子吧家人们，碰过就回不去了。超级推荐尝试。不过控制台依托答辩，目前体验过最烂的控制台，密钥对还不给下载。但是配置牛逼，防火墙开好剩下就是 SSH 的事，控制台靠边站，不用就不会感觉烂😀 考虑了延迟和价格等因素后，在 naine 的建议下选择了阿里云新加坡的轻量应用服务器，也就是本站现在的服务器 ~~辗转各大厂商的白嫖服务器之后，现在在谷歌云上搭建本站。使用起来没有什么问题，非常舒适，甚至不需要换源。~~现在在 Cloudflare Pages 上托管由 Hugo 生成的静态网页，不用服务器感觉太爽了。另外，为了博客的其他部分（如评论系统）的方便，也是境外服务器较好，后文会有详细说明。至此，服务器和域名相关的踩坑结束。\n本节建议 # 如果你不愿意备案，请毫不犹豫的选择大陆以外的 VPS，例如本站选择的阿里云国际谷歌云。如果选择的服务器在大陆以外，域名可以随意选择，因为可以用 cf 的解析。如果服务器在大陆内，域名请尽量选择跟服务器同一个商家的，否则域名转入和备案会很麻烦，还请注意。\n系统 # 此部分是临时决定加的，由于踩坑太多，决定专门说一下，仅代表个人意见。\n本节建议 # 本节建议和内容完全一致，所以不重复写了。\n系统请选择 Ubuntu 或者 Debian (本人现在选择 Debian)。很多人用 Centos，网上 Centos 的教程也很多，但 Centos 已经被 Redhat 官方放弃了，现在是没有官方维护的系统。别人 apt update 一下就能用了，Centos 进来第一件事是换源，非常影响使用。如果执意使用 Centos，请选择 Centos 7 而不是 8，因为某些软件并没有来得及发布对于 Centos 8 的包，Redhat 就放弃了 Centos，因此 Centos8的软件是不如7齐全的。\n另外，阿里云镜像市场中提供的宝塔面板镜像有一个很严重的问题。即使换了源并 apt update 之后也会出现找不到 httpd nginx php mysql mairadb python-psutil python2-psutil 软件包的情况，解决方法为找到 /etc/yum.conf，并把其中的 exclude=httpd nginx php mysql mairadb python-psutil python2-psutil 这一行给注释掉。出处为 诡异 YUM 问题: 无法找到(安装卸载)一个特定的包 - V2EX 感谢老哥。(所以建议还是选个纯净镜像，想装什么自己手动装。)\nSSL 证书 # 2023 年 4 月 4 日更新 刚写完就废了，撅了，Nginx 和 SSL 证书相关的部分可以用 Caddy 替代，省事了不少。具体请看文章 将 Nginx 更换为 Caddy\n说实话，开始写这一部分的时间和完成第一部分的时间相隔了很久，在这期间经历了换博客系统，换服务器，等一系列问题。幸好上一部分内容比较稳定，不需要怎么更改。而 SSL 证书这一部分，也幸好还没开始写，一开始本以为这一部分问题不大，也是比较容易的一项。后来才发现水比想象中深得多。SSL 证书有什么用，这里不再赘述，有需要请自行谷歌。\n证书的选择 # 首先是选择哪一家的证书。富哥可以选择商业证书然后 v 我 50，而本人作为学生党，本着能省则省的原则，当然是在几家免费证书间选择，分别是\n老朋友 cloudflare (cf) Let\u0026rsquo;s Encrypt (下文简称 le) ZeroSSL (下文简称 zero)。 先说 cf，虽然有效期为惊人的 15 年，但基本上不建议选择，因为这家证书只有他们自己认\u0026hellip;\u0026hellip; 谁也不想配完证书被标红，那样还不如直接 http 呢。\n然后是 zero，原本 zero 只是用来签发 le 证书的，现在也开始自己签发证书了。Zero 签发的证书有效期为 90 天，到期可免费续签。支持签发泛域名证书。网页端只能申请三张证书，但使用 acme. Sh 签发则没有这个限制。与 le 相比，最大的区别就是 zero 对于签发速率没有限制，可以短时间内大量申请。但 zero 的接口服务器不太稳定，有可能连续出现续期失败的问题很久。兼容性和 le 相比各有千秋。\n最后是本站采用的老牌免费证书 le，也是 90 天有效期，到期免费续签。也支持签发泛域名证书。接口服务器比较稳定，但对签发速率有限制。Le 和 zero 其实都是很好的选择，建议为自己使用的工具自带哪个就用哪个，看哪个顺眼就用哪个。证书更换的成本很低，真出问题了再换也不迟。\n申请过程 # 说完了选择，再来说申请。因为本站采用的是 le 证书，所以这里写的是 le 证书的申请教程。若以后更换证书，会回来更新。Le 证书申请推荐使用 certbot (LE 官方推荐的申请工具，简单上手)。如有需要将证书推送到另一台服务器但又不想使用 rsync 等同步软件的，可以考虑使用 acme. Sh 或 getssl 为申请工具。但本人目前还没有用过，用过之后会回来更新。\n言归正传，首先安装 certbot。以下所有操作建议在使用 root 账户执行，否则请自行在每条命令前加上 sudo。\napt update apt install certbot 若提示找不到包的话先添加源。\napt install software-properties-common add-apt-repository ppa:certbot/certbot 添加后再执行前面的命令。\ncertbot 有两种验证方式，分别是 http 和 dns。申请泛域名证书只能采用 dns 方式。若是使用 cf 的解析服务，有对应的插件可以很方便地完成验证。还有其他的插件，具体请查看 官方文档。\n本站采用的是阿里云解析，没有官方的插件进行验证，只能采用 --manual 方法来验证。如果使用 --manual 验证，需要在中途自己手动去 dns 解析中添加 TXT 记录，完成验证，获取完成之后还要再把这几条记录删除，非常的麻烦。而且这样子获取到的证书无法使用 certbot renew 命令自动续签，因为每次都要打开 dns 添加 TXT 记录。考虑到这点，certbot 官方给出了使用脚本完成添加 TXT 记录的方法，使用脚本完成验证可以自动续签。幸运的是已经有大佬造了轮子，可以直接使用。\nywdblog/certbot-letencrypt-wildcardcertificates-alydns-au certbot\u0026rsquo;renewing letencrypt certificate plugin - automatic verification aliyun/tencentyun/godaddy dns Python 1074 293 再次感谢大佬的无私奉献。\n详细的使用方法在 readme 里写的很详细，不再赘述，直接给出命令的例子。需要注意的是 certbot-auto 已被官方启用，请改为 certbot。\ncertbot certonly -d *.example.com -d example.com --email example@example.com --manual --preferred-challenges dns --manual-auth-hook \u0026#34;/脚本的绝对路径/au.sh python aly add\u0026#34; --manual-cleanup-hook \u0026#34;/脚本的绝对路径/au.sh python aly clean\u0026#34; --dry-run 这里我采用的是 python (因为 Debian 自带 python)。-d 后面写需要申请证书的域名，支持通配符 * 需要申请几个域名的证书就写几个 -d。需要注意的是泛域名的证书不能给根域名用，如果有需要的话请像我一样写至少两个 -d。尾部的 --dry-run 是指尝试获取，用来测试，如果能获取成功的话删去 --dry-run 再运行一遍即可成功获取。\n如果不需要申请泛域名证书，则可以采用 --webroot 等方法进行 http 验证，这里不再赘述，网上有很多教程，不过 dns 方法是通用的，推荐用 http 方法是因为更加快捷，不过需要在 Nginx 等软件里做好配置，具体请谷歌。\n成功获取到证书之后，除了上文提到的 --manual 不支持，但用脚本的支持之外，续订是非常容易的。Certbot 会自动保存上一次获取证书的参数，所以续订只需要运行\ncertbot renew 即可。有效期 90 天，在第 60 天后可以续订。当然，作为文明的现代人，肯定不能到期自己手动续签。直接使用 Linux 的定时任务完成这个工作，考虑到续签有可能因为网络环境等原因失败，根据官方建议，频率设为一天两次比较合理。\n先输入\ncrontab -e 然后在文件尾部加入\n0 */12 * * * certbot renew --pre-hook \u0026#34;service nginx stop\u0026#34; --post-hook \u0026#34;service nginx start\u0026#34; 保存退出，然后\nService crond restart 即可。60 天后记得检查一下是否成功续签。\n配置证书 # 在 Nginx 对应的 server 块中添加如下内容即可成功配置 SSL 证书。server_name，ssl_certificate和ssl_certificate_key请根据实际情况修改。\nListen 443 ssl http 2; Listen [::]: 443 ssl http 2; Server_name _ Ssl_certificate /etc/letsencrypt/live/域名/fullchain. Pem; Ssl_certificate_key /etc/letsencrypt/live/域名/privkey. Pem; Ssl_session_timeout 5 m; Ssl_protocols TLSv 1.1 TLSv 1.2 TLSv 1.3; Ssl_ciphers ECDHE-RSA-AES 128-GCM-SHA 256:HIGH:! ANULL:! MD 5:! RC 4:! DHE; Ssl_prefer_server_ciphers on; 防止证书泄露源站 IP # 此外还有非常重要的一个问题，就是 SSL 证书会泄露你的源 IP 地址，具体请谷歌。Naine 提醒了我这一点，所以来说一下怎么避免这个问题。泄露的具体方式可以谷歌。只需要在直接访问数字 IP 时不握手对应域名的证书即可解决。在 Nginx 1.19.4 及以上，有一个新的配置项ssl_reject_handshake。只需要在对应的 server 块里加上ssl_reject_handshake on;即可。而在 Nginx 1.19.4 以下没有这个选项的情况下，需要自己申请一个无效证书并配置到数字 IP 的 server 块上。配置方法和上文的配置 SSL 方法一样，server_name换成 IP，证书文件换成假的证书即可。\n本节建议 # 建议在 ZeroSSL 和 Let\u0026rsquo;s Encrypt 之间选择顺眼的证书。Le 的申请过程可参考上方内容。但是防止源站 IP 泄露的措施一定要做好！建议在做好这些措施之前不要开启 443 和 80 端口。否则底裤就有可能漏干净了。\n搭建博客 # 2023 年 6 月 12 日更新，目前本站使用 Hugo 搭建。但得益于 Go 干净无依赖的特性，迁移过程比较简单，网上已有许多教程。也没有遇到特别值得注意的有意思的点，因此不再赘述。\n在经历前面这么多磕磕绊绊之后，终于可以开始正题——博客的搭建了。\n博客框架的选择 # 2023 年 4 月 4 日更新 Hugo 和 WordPress 体验。\n出于兴趣，我又了解对比了几个常见的博客框架。不过除了 Hexo 和 Halo 实际使用过之外，其他都只是接触到皮毛而已，所以说的可能有不对的地方，欢迎指正。我认为主题是表现一个博主的各方面的第一印象，想要自己搭建博客而不是选择 CSDN，简书之流的人也基本都是充满个性的人，所以我认为主题应当是很多人看重的一点，所以我单独列出了一栏主题的现状，谨供参考。\n框架 静/动态 stars 看法 主题 Hexo 静 36.5 k 台湾团队开发的一个框架。作为同胞，相关社区的中文含量比较高。中文圈内使用的人也很多，所以遇到问题，也比较容易找到解决方法。有插件系统。但是官方文档写的不太行。 有官方的主题仓库，寻找主题较为方便。也有很多漂亮的主题。 Jekyll 静 46.4 k 静态经典框架，中文圈内使用的人相对不多，有插件系统，用户基数大，遇到问题多谷歌应该可以解决。 有官方的主题仓库，但按照我的审美来看，Jekyll 的主题有点老旧，不够精致。 Hugo 静 66.3 k 作为 star 数量增长最快的框架，Hugo 渲染速度独步天下。Hexo 需要渲染数十秒的文章，相同字数和数量 Hugo 只需要不到 1 秒。Star 数也是后来居上，中文圈和外国圈都有大量用户。相对于 Jekyll 来说，没有插件，遇到需求可能需要自己动手。反过来说也是十分干净精简的框架。 追加上手体验：早知道还是 Hugo，构建速度真的太快了，甩了 Hexo 几条街，npm 再见。要是想搭静态博客的话，建议直接上 Hugo。 有官方主题站，寻找主题较为方便，也有很多漂亮的主题。 VuePress 静 21.4 k 用的人少，教程更少，几篇中文教程翻来覆去地互相抄。上手难度可能比以上三个框架要高一些，遇到问题可能也需要花更多力气解决。 没·有·官·方·主·题·站·！Suprised mother fxxker。这意味着想找到自己心仪的主题需要花费比其他框架多得多的时间成本。Naine 说 VuePress 本质是文档，对主题的表现发挥会比较有限制。可能也是因为这个原因没有官方主题站，主题也不多。但我去看过几个主题，也挺漂亮的。 Typecho 动 9.8 k 国人开发的框架。可能也因为这个原因，别看 star 少，教程却比 VuePress 多。包括这方面在内，上手难度不高，感觉非常有潜力。但是官方不活跃，官方论坛也不活跃。上一次正式版 release 是 22 年 4 月 1 日，刚好是一整年前。所以某些问题可能要自己用力探索。 有官方主题仓库，主题数量出乎意料地不少，但符合我的审美的主题不多。有付费主题 (不代表别的框架没有，只是我确认到了的才会写上)。 Gastby 静 54.3 k 功能非常强大，可以自定义的内容也很多。代价是依赖问题较为严重。适合有编程基础的人使用，否则应该很难上手。 没·有·官·方·主·题·站·！有卧龙就有凤雏，这也使得这个框架的上手难度进一步提高。 Halo 动 26.6 k 国人开发的框架。也是本站目前使用的框架。作为动态框架，比较消耗性能，官方推荐至少 1 G RAM。官方非常活跃，有官方论坛，在 issue 和论坛发问都会有回应。官方文档很详细。 有官方的主题仓库，但相较于其他框架主题较少，不过大部分都挺好看的。另外目前完全适配2.0大版本的主题依然不多。官方有计划推出付费主题。 WordPress 动 17.6k star 数没有影响，作为商业项目， WordPress 本身就不靠这个吃饭，仓库只是作为镜像站存在。上面的其他框架都是博客框架，主要还是支持博客的撰写。而 WordPress 是网站框架，可以拿来建商业网站等，个人博客只是其中一种网站。从我浅尝辄止的体验来看，功能非常强大，但如果不使用 docker 的话安装对新手来说较为麻烦，占用和 Halo 差不多，主要是因为 MYSQL 的占用。建议 1G RAM 起步。功能非常强大，后台功能非常多，还有大量插件，主题也有许多玩法（但后台主界面有点老旧了）。就写博客来说，后台撰写体验远好于 Halo。用的人多，出问题基本都有人踩过坑，容易找解决方法。如果你只是想简单写个博客，建议选择其他框架；但如果你想深入自定义自己的网站且发现其他框架都满足不了你，建议来 WordPress 试一试。 有官方主题站，有大量免费/付费主题。但合我胃口的不多，且付费主题偏贵。（所以才浅尝辄止XD） 对于大部分人来说，静态动态最大的区别就是静态可以直接搭在 github等托管网页服务上，不需自己购买服务器，而动态不可以。事实上静态相比于动态还有安全性好，占用资源低访问速度快等优点。而动态相比于静态的~~（未必是）~~优点就是有完善的后台功能，可以进行注册登录评论等行为，也可以在后台进行写作，不像静态只能在本地写好文章再渲染好再发布（但后台写作体验未必比本地写作好）。框架可以根据这些优缺点来进行选择。\n使用 Halo 框架搭建博客 # 表格里也说了，本站现在选用的是 Halo 框架搭建。虽然很想详细说说，但具体安装方式 官方文档已经写的很清楚了，不再赘述。需要注意的是halo. External-url一定要填写为自己的域名，否则后续使用会有奇奇怪怪的问题。Docker-compose 的安装也可以较为方便地使用如下命令：\nsudo apt install docker. Io -y curl -L \u0026#34; https://github.com/docker/compose/releases/latest/download/docker-compose-$ (uname -s)-$(uname -m)\u0026#34; -o /usr/local/bin/docker-compose chmod a+x /usr/local/bin/docker-compose ln -s /usr/local/bin/docker-compose /usr/bin/dc dc -v 出处为与本文毫不相干的 OpenaiBot 安装教程，感谢作者。\n另外，一般来说是建议选择框架的最新版本。截至撰写本文时 Halo 最新版本为 2.4.0。但是我很喜欢的本站现在的主题 Sakura 现在还没有完全适配 Halo 2，许多功能有所缺失，所以我选择回到 Halo 1，等适配完全之后再迁移。Halo 的后台地址统一为 http://域名/console/ 。但 Halo 1 在初次进入页面时会有安装引导，安装完成就会自动进入后台，此时后台的地址为 http://域名/install#/ 。但是！这个地址是一次性的！ 离开这个界面或者登录过期之后这个地址就进不去了。初次遇见令我百思不得其解，前台能正常访问但是后台进不去，并且也不是 Halo 2 一样的 console 进入。论坛和 issue 也没有类似问题，后来机缘巧合查到了一点线索，最后确定后台地址为 http://域名/admin#/使用时只需要在后面加上admin即可进入 。听起来只是一个很滑稽的问题，但当时真的花费了我很多时间去寻找答案。现在的官方文档里也没有找到相关的说法。我觉得如果第一次搭建博客并选择使用 Halo 1 可能会跟我遇到一样的问题，所以在此记录一下。\n使用 Hexo 框架搭建博客 # 在换到 Halo 之前，我使用过 Hexo，安装教程也很多，较为简单，也不再赘述。不过如果想要将 Hexo 部署在 github 上，则有一个有趣的部署相关事项。想要使用hexo d来进行部署，需要在 hexo 的 config.Yaml 中填写形如\nDeploy: Type: git repo: https://github.com/用户名/用户名.github.io.git Branch: master 的字段，一般会在该文件最底部。但在实际运行时，会在hexo d并输完用户名密码之后出现remote: Support for password authentication was removed on…的错误。对于这个问题，可以使用 token 来代替用户名密码登录解决。过程如下：\n打开个人的 Personal Access Tokens (Classic) 界面，生成一个 classic 的 token。由于是用来对博客的仓库进行修改，所以 repo 的相关权限最好全部勾上以备不时之需。其他可以按需自选。Expiration 按自己喜欢来，我比较懒，直接选择 No expiration（永不过期）。生成之后保管好，不要泄露。然后回到 config. Yaml，对 deploy 的相关内容修改为如下形式：\nDeploy: Type: git Repo: https://[这里填你拿到的 token]@github. Com/用户名/用户名. Github. Io. Git Branch: master 然后再运行hexo d，就可以正常部署了。\n本节建议 # 说实话，本节实际操作内容非常少，不像是本文真正的重点。权当记录自己遇到的有趣问题。想选择框架的话，上方 表格有我较为粗浅的总结，若不嫌弃可以作为参考，不胜惶恐。如果是新手（比如我）还是推荐用人多官方又活跃的，遇到问题不至于两眼一抹黑。\n后记 # 磕磕绊绊，中途也经历了不少事情，还有学业要忙，前后历时差不多一个月左右，也总算是把这第一篇文章写完了。许多内容过于基础，想必难以入各位大佬法眼，还请海涵。前文也提到过许多次，本文只是用来记录自己学习的过程，也有备忘录的意思。如果有哪位看到这篇文章里有一些内容可以作为参考，带来一点帮助，那就不胜荣幸了。其实还踩了很多别的坑，学到很多别的东西，不过不太适合在这里写，于是作罢。最近还打算试试 Caddy，说不定还能水一篇文章。\n最后，再次顿首感谢 naine 数不清的帮助。\n参考文章 # 踩的坑很多，参考文章也很多，我自己都数不清了。有许多问题是在折腾 Hexo 和 Nginx 和 SSL 证书过程中遇到的，但不是本文重点，所以除了文中的各官方文档，斗胆省略大部分，挑选一些印象较为深刻的写下：\n[记录]使用 Certbot 与 Cloudflare 插件申请通配符证书 - 掘金 (juejin. Cn)\n【补档】Let\u0026rsquo;s Encrypt 证书的申请、自动更新和 Nginx 的配置 - 森见鹿的博客 (senjianlu.com)\nNGINX 配置避免 IP 访问时证书暴露域名 - ZingLix Blog\n命令行输入hexo d后发现不能输入GitHub密码登录_SoberGit的博客-CSDN博客\n诡异 YUM 问题: 无法找到(安装卸载)一个特定的包 - V2EX\nDocker | Openai Kira Org (llmkira.github.io)\n感谢建站过程中参考过的所有文章的作者们。\n","date":"2023年 4月 3日","permalink":"/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E5%BB%BA%E7%AB%99%E8%AE%B0/","section":"Posts","summary":"","title":"从零开始的建站记"},{"content":"","date":"2023年 4月 3日","permalink":"/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/","section":"Tags","summary":"","title":"服务器"},{"content":"","date":"2023年 4月 3日","permalink":"/tags/%E7%BD%91%E7%AB%99/","section":"Tags","summary":"","title":"网站"},{"content":"","date":"2023年 4月 3日","permalink":"/tags/%E5%9F%9F%E5%90%8D/","section":"Tags","summary":"","title":"域名"},{"content":" 本站是在某人的喜好和大量帮助下促成的，但在搭建过程中本人自己也找到了乐趣，乐在其中。感谢一路以来的帮助，我会尽量写一些有趣的东西，以后也请多关照。 # ","date":"2023年 3月 29日","permalink":"/about/","section":"容器","summary":"","title":"关于"},{"content":"","date":"0001年 1月 1日","permalink":"/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"","date":"0001年 1月 1日","permalink":"/series/","section":"Series","summary":"","title":"Series"}]